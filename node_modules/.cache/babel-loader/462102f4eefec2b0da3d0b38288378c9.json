{"remainingRequest":"C:\\Users\\null\\Desktop\\jingdong111111111\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\null\\Desktop\\jingdong111111111\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\null\\Desktop\\jingdong111111111\\src\\untils\\request.js","dependencies":[{"path":"C:\\Users\\null\\Desktop\\jingdong111111111\\src\\untils\\request.js","mtime":1634711132580},{"path":"C:\\Users\\null\\Desktop\\jingdong111111111\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\null\\Desktop\\jingdong111111111\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\null\\Desktop\\jingdong111111111\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7IC8v5a6J6KOFYXhpb3MgIOWcqOW8leWFpQovL2F4aW9z6Ieq5bim55qEY3JlYXRl5pa55rOVCgp2YXIgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoewogIC8vIOWFrOWFseeahGFwaeaOpeWPo+WcsOWdgAogIGJhc2VVUkw6ICdodHRwczovL3d3dy5mYXN0bW9jay5zaXRlL21vY2svNGYzMDNlN2M5ZjJjZmVmNzgyMjRhY2ZkZGNkZDdlNDkvYXBpJywKICAvLyDotoXml7bml7bpl7QKICB0aW1lb3V0OiAxMDAwMAp9KTsgLy/lsIHoo4VnZXTor7fmsYIKLy8gdXJsIOaOpeWPo+WcsOWdgCBwYXJhbXPlnLDlnYDopoHkvKDpgJLnmoTkv6Hmga8g6buY6K6k5oOF5Ya15piv56m6CgpleHBvcnQgdmFyIGdldCA9IGZ1bmN0aW9uIGdldCh1cmwpIHsKICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgaW5zdGFuY2UuZ2V0KHVybCwgewogICAgICBwYXJhbXM6IHBhcmFtcwogICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTsKICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfTsgLy9wb3N0IOaOpeWPo+WcsOWdgCBkYXRh5pWw5o2uIOm7mOiupOaDheWGteaYr+epugoKZXhwb3J0IHZhciBwb3N0ID0gZnVuY3Rpb24gcG9zdCh1cmwpIHsKICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGluc3RhbmNlLnBvc3QodXJsLCBkYXRhLCB7CiAgICAgIC8vIOWQjuerr+imgeaxgnBvc3TmmK9qc29u5qC85byP5omA5Lul6K6+572u6K+35rGC5aS06YOoCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIHJlamVjdChlcnIpOwogICAgfSk7CiAgfSk7Cn07"},{"version":3,"sources":["C:/Users/null/Desktop/jingdong111111111/src/untils/request.js"],"names":["axios","instance","create","baseURL","timeout","get","url","params","Promise","resolve","reject","then","response","data","err","post","headers"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;;AACA,IAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5B;AACAC,EAAAA,OAAO,EAAE,qEAFmB;AAG5B;AACAC,EAAAA,OAAO,EAAE;AAJmB,CAAb,CAAjB,C,CAMA;AACA;;AACA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAsB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACvC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,IAAAA,QAAQ,CAACI,GAAT,CAAaC,GAAb,EAAkB;AAChBC,MAAAA,MAAM,EAANA;AADgB,KAAlB,EAEGI,IAFH,CAEQ,UAACC,QAAD,EAAc;AACpBH,MAAAA,OAAO,CAACG,QAAQ,CAACC,IAAV,CAAP;AACD,KAJD,EAIG,UAAAC,GAAG,EAAI;AACRJ,MAAAA,MAAM,CAACI,GAAD,CAAN;AACD,KAND;AAOD,GARM,CAAP;AASD,CAVM,C,CAWP;;AACA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACT,GAAD,EAAoB;AAAA,MAAdO,IAAc,uEAAP,EAAO;AACtC,SAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,IAAAA,QAAQ,CAACc,IAAT,CAAcT,GAAd,EAAmBO,IAAnB,EAAyB;AACvB;AACAG,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFc,KAAzB,EAKGL,IALH,CAKQ,UAACC,QAAD,EAAc;AACpBH,MAAAA,OAAO,CAACG,QAAQ,CAACC,IAAV,CAAP;AACD,KAPD,EAOG,UAAAC,GAAG,EAAI;AACRJ,MAAAA,MAAM,CAACI,GAAD,CAAN;AACD,KATD;AAUD,GAXM,CAAP;AAYD,CAbM","sourcesContent":["import axios from 'axios'\r\n\r\n//安装axios  在引入\r\n\r\n//axios自带的create方法\r\nconst instance = axios.create({\r\n  // 公共的api接口地址\r\n  baseURL: 'https://www.fastmock.site/mock/4f303e7c9f2cfef78224acfddcdd7e49/api',\r\n  // 超时时间\r\n  timeout: 10000\r\n})\r\n//封装get请求\r\n// url 接口地址 params地址要传递的信息 默认情况是空\r\nexport const get = (url, params = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    instance.get(url, {\r\n      params\r\n    }).then((response) => {\r\n      resolve(response.data)\r\n    }, err => {\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n//post 接口地址 data数据 默认情况是空\r\nexport const post = (url, data = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    instance.post(url, data, {\r\n      // 后端要求post是json格式所以设置请求头部\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then((response) => {\r\n      resolve(response.data)\r\n    }, err => {\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n"]}]}